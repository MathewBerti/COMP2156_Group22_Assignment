Week One:
    Why DevOps?
        Explore the evolving of DevOps and the significant increase in modern software development.
        introduce the conept of a build pipline. It consists of a series of tasks that perform various steps in the build process.
        Continuous Integration (CI) involves developers checking their code into a version-controlled repository multiple times per day, triggering automated build pipelines.
        Continuous Delivery (CD) enables reliable, quick, and sustainable delivery of bug fixes, features, and configuration changes into production.
        
week two:
    Version Control and Tools
        Define version control systems (VCS) and their importance in managing code changes.
        Discuss the benefits of using version control systems.
        Explain key terminology associated with version control systems.
        Compare centralized version control systems (CVCS) and distributed version control systems (DVCS), highlighting their differences and advantages.

Week Three:
    Application Architecture and Tech Stack
        Compare monolithic and microservice architectures, discussing their characteristics, advantages, and challenges.
        Explain the concepts of vertical and horizontal scaling in the context of application architecture and infrastructure design.
        Explore the technology stack components required to build reliable and scalable applications, including databases, web servers, and application frameworks.

Week four:
    DevOps Roles and CI/CD

        Define the roles and responsibilities of DevOps engineers, sysadmins, developers, and other stakeholders in implementing DevOps practices.
        Explore the tools and techniques used in DevOps environments for automation, monitoring, and infrastructure management.
        Discuss how traditional system administration tasks align with DevOps principles and practices.
        Explore the cultural aspects of DevOps, including collaboration, continuous improvement, and the DevOps lifecycle stages: plan, code, build, test, release, deploy, operate, and monitor.
        


        